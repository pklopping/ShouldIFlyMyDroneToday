// Generated by CoffeeScript 1.10.0
(function() {
  var ForecastAnalysis;

  window.ForecastAnalysis = ForecastAnalysis = (function() {
    ForecastAnalysis.prototype.acceptable_fixed_wing_windspeed = 15;

    ForecastAnalysis.prototype.acceptable_multi_rotor_windspeed = 10;

    ForecastAnalysis.prototype.acceptable_precipitation_probability = 0.05;

    ForecastAnalysis.prototype.short_answer_selector = 'p.short_answer';

    ForecastAnalysis.prototype.current_weather_selector = 'fieldset.current_weather';

    function ForecastAnalysis(raw_data, waterproof, fixed_wing, illuminated) {
      var currently, overall_answer, responses, today;
      console.log("ForecastAnalysis constructed");
      overall_answer = true;
      currently = raw_data.currently;
      today = raw_data.daily.data[0];
      responses = [];
      responses.push(this.check_precipitation(currently, waterproof));
      responses.push(this.check_windspeed(currently, fixed_wing));
      responses.push(this.check_daylight(today, illuminated));
      this.update_interface(raw_data, responses);
    }

    ForecastAnalysis.prototype.check_daylight = function(today, illuminated) {
      var reason, result;
      result = true;
      reason = "";
      if (illuminated) {
        result = true;
        reason = "You've got lights, you can fly in a cave with no lights!";
      } else {
        result = today.sunriseTime < (Date.now() / 1000) && (Date.now() / 1000) < today.sunsetTime;
        if (result) {
          reason = "You've got sunlight... for now";
        } else {
          reason = "The sun is down and you have no lights";
        }
      }
      return {
        result: result,
        reason: reason
      };
    };

    ForecastAnalysis.prototype.check_windspeed = function(data, fixed_wing) {
      var reason, result;
      result = true;
      reason = "";
      if (fixed_wing) {
        result = data.windSpeed < this.acceptable_fixed_wing_windspeed;
      } else {
        result = data.windSpeed < this.acceptable_multi_rotor_windspeed;
      }
      if (result) {
        reason = "The wind isn't too fast";
      } else {
        reason = "The wind speed is too damned high!";
      }
      return {
        result: result,
        reason: reason
      };
    };

    ForecastAnalysis.prototype.check_precipitation = function(data, waterproof) {
      var reason, result;
      result = true;
      reason = "";
      if (waterproof) {
        result = true;
        reason = "Rain ain't no thing for your aircraft!";
      } else {
        result = data.precipProbability < this.acceptable_precipitation_probability;
        if (result) {
          reason = "The chance of rain is small enough to ignore";
        } else {
          reason = "There's a good chance you'll get rained out";
        }
      }
      return {
        result: result,
        reason: reason
      };
    };

    ForecastAnalysis.prototype.update_interface = function(raw_data, responses) {
      var $current_weather, aggregate, currently, i, len, overall_response, remaining_sunlight, response, response_result, sunlight, text_responses, today;
      aggregate = true;
      text_responses = "";
      for (i = 0, len = responses.length; i < len; i++) {
        response = responses[i];
        response_result = response.result;
        text_responses += "<p class='reason " + response.result + "'>" + response.reason + "</p>";
        aggregate = response_result ? aggregate : false;
      }
      overall_response = "<p>" + (aggregate ? "Yup! Go fly!" : "You might not want to") + "</p>";
      $(this.short_answer_selector).html(overall_response + text_responses);
      $current_weather = $(this.current_weather_selector);
      $current_weather.children().not('legend').remove();
      currently = raw_data.currently;
      today = raw_data.daily.data[0];
      sunlight = today.sunriseTime < (Date.now() / 1000) && (Date.now() / 1000) < today.sunsetTime;
      remaining_sunlight = this.seconds_to_hours(today.sunsetTime - (Date.now() / 1000));
      debugger;
      return $current_weather.append('<p>Summary: ' + currently.summary + '</p>').append('<p>Temperature: ' + Math.round(currently.temperature) + 'F</p>').append('<p>Precipitation: %' + (currently.precipProbability * 100) + '</p>').append('<p>Wind Speed: ' + Math.round(currently.windSpeed) + 'mph</p>').append('<p>Sunlight: ' + (sunlight ? "Yup, you've got " + remaining_sunlight + " hours to fly" : "Nope") + '</p>');
    };

    ForecastAnalysis.prototype.seconds_to_hours = function(seconds) {
      return (seconds / 60 / 60).toFixed(2);
    };

    return ForecastAnalysis;

  })();

}).call(this);
